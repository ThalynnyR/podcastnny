{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/trabelo/Documents/podcastnny/src/contexts/PlayerContext.tsx\";\nimport { createContext, useContext, useState } from 'react'; // Compartilhamento de informações\n\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  const {\n    0: isLooping,\n    1: setIsLooping\n  } = useState(false);\n  const {\n    0: isShuffling,\n    1: setIsShuffling\n  } = useState(false);\n\n  function playList(list, index) {\n    setEpisodeList(list); // passa uma lista de episodios\n\n    setCurrentEpisodeIndex(index); // qual episodio tocou\n\n    setIsPlaying(true); // se a pessoa tiver pausado e despausar tem que tocar direto\n  }\n\n  function play(episode) {\n    // jogar dentro do episodeList\n    setEpisodeList([episode]); // só um dentro do array\n\n    setCurrentEpisodeIndex(0); // então esse precisa ser o tocado no momento, forçando ser o unico do array, ou seja, 0\n\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying); // se tiver pause, vira play e vice versa\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping); // rodar infinito\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling); // embaralhar, aleatório\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      // barrar que ele toque um numero maior do que o que tem na lista\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  function clearPlayerState() {\n    setEpisodeList([]);\n    setCurrentEpisodeIndex(0);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      // Compartilhamento de dados, informações estilo redux, \n      episodeList,\n      // o que estiver aqui será compartilhado\n      currentEpisodeIndex,\n      play,\n      playList,\n      playNext,\n      playPrevious,\n      isPlaying,\n      isLooping,\n      isShuffling,\n      togglePlay,\n      toggleLoop,\n      toggleShuffle,\n      setPlayingState,\n      hasNext,\n      hasPrevious\n    },\n    children: [children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n};","map":{"version":3,"sources":["/home/trabelo/Documents/podcastnny/src/contexts/PlayerContext.tsx"],"names":["createContext","useContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","playList","list","index","play","episode","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","hasPrevious","hasNext","length","playNext","nextRandomEpisodeIndex","Math","floor","random","playPrevious","clearPlayerState","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\n\n// Compartilhamento de informações\ntype Episode = {\n  title: string,\n  members: string,\n  thumbnail: string,\n  duration: number,\n  url: string;\n}\n\ntype PlayerContextData = {\n  episodeList: Array<Episode>,\n  currentEpisodeIndex: number;\n  isPlaying: boolean;\n  isLooping: boolean;\n  isShuffling: boolean;\n  play: (episode: Episode) => void;\n  playList: (list: Episode[], index: number) => void;\n  setPlayingState: (state: boolean) => void;\n  togglePlay: () => void;\n  toggleLoop: () => void;\n  toggleShuffle: () => void;\n  playNext: () => void;\n  playPrevious: () => void;\n  hasNext: boolean;\n  hasPrevious: boolean;\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData)\n\ntype PlayerContextProviderProps = {\n  children: ReactNode; // qualquer coisa html, conteudo jsx\n}\n\nexport function PlayerContextProvider({ children }: PlayerContextProviderProps) {\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLooping, setIsLooping] = useState(false);\n  const [isShuffling, setIsShuffling] = useState(false);\n\n  function playList(list: Episode[], index: number) {\n    setEpisodeList(list); // passa uma lista de episodios\n    setCurrentEpisodeIndex(index); // qual episodio tocou\n    setIsPlaying(true); // se a pessoa tiver pausado e despausar tem que tocar direto\n\n  }\n\n  function play(episode: Episode) { // jogar dentro do episodeList\n    setEpisodeList([episode]); // só um dentro do array\n    setCurrentEpisodeIndex(0); // então esse precisa ser o tocado no momento, forçando ser o unico do array, ou seja, 0\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying); // se tiver pause, vira play e vice versa\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping); // rodar infinito\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling); // embaralhar, aleatório\n  }\n\n  function setPlayingState(state: boolean) {\n    setIsPlaying(state)\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = isShuffling || ((currentEpisodeIndex + 1) < episodeList.length);\n\n  function playNext() {\n    if (isShuffling) {\n      const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n\n    } else if (hasNext) { // barrar que ele toque um numero maior do que o que tem na lista\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  function clearPlayerState() {\n    setEpisodeList([]);\n    setCurrentEpisodeIndex(0);\n  }\n\n\n  return (\n    <PlayerContext.Provider\n      value={{ // Compartilhamento de dados, informações estilo redux, \n        episodeList, // o que estiver aqui será compartilhado\n        currentEpisodeIndex,\n        play,\n        playList,\n        playNext,\n        playPrevious,\n        isPlaying,\n        isLooping,\n        isShuffling,\n        togglePlay,\n        toggleLoop,\n        toggleShuffle,\n        setPlayingState,\n        hasNext,\n        hasPrevious,\n      }} >\n\n      {children} {/* recebendo o que está sendo passado no _app. */}\n    </PlayerContext.Provider>\n  )\n}\n\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n}"]},"metadata":{},"sourceType":"module"}