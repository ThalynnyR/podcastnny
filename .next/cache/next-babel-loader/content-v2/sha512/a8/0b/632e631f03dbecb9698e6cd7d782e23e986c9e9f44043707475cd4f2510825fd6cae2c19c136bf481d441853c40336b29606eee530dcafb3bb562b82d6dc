{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/trabelo/Documents/podcastnny/src/contexts/PlayerContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react'; // Compartilhamento de informações\n\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  function playList(list, index) {\n    setEpisodeList(list); // passa uma lista de episodios\n\n    setCurrentEpisodeIndex(index); // qual episodio tocou\n\n    setIsPlaying(true); // se a pessoa tiver pausado e despausar tem que tocar direto\n  }\n\n  function play(episode) {\n    // jogar dentro do episodeList\n    setEpisodeList([episode]); // só um dentro do array\n\n    setCurrentEpisodeIndex(0); // então esse precisa ser o tocado no momento, forçando ser o unico do array, ou seja, 0\n\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying); // se tiver pause, vira play e vice versa\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping); // rodar infinito\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    var nextEpisodeIndex = currentEpisodeIndex + 1;\n\n    if (hasNext) {\n      // barrar que ele toque um numero maior do que o que tem na lista\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      // Compartilhamento de dados, informações estilo redux, \n      episodeList: episodeList,\n      // o que estiver aqui será compartilhado\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      playList: playList,\n      playNext: playNext,\n      playPrevious: playPrevious,\n      isPlaying: isPlaying,\n      togglePlay: togglePlay,\n      setPlayingState: setPlayingState,\n      hasNext: hasNext,\n      hasPrevious: hasPrevious\n    },\n    children: [children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlayerContextProvider, \"3HvmxYPD5LZxO4zIQndWV+iMQ6k=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["/home/trabelo/Documents/podcastnny/src/contexts/PlayerContext.tsx"],"names":["createContext","useContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","playList","list","index","play","episode","togglePlay","toggleLoop","setPlayingState","state","hasPrevious","hasNext","length","playNext","nextEpisodeIndex","playPrevious","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\n\n// Compartilhamento de informações\ntype Episode = {\n  title: string,\n  members: string,\n  thumbnail: string,\n  duration: number,\n  url: string;\n}\n\ntype PlayerContextData = {\n  episodeList: Array<Episode>,\n  currentEpisodeIndex: number;\n  isPlaying: boolean;\n  isLooping: boolean;\n  play: (episode: Episode) => void;\n  playList: (list: Episode[], index: number) => void;\n  setPlayingState: (state: boolean) => void;\n  togglePlay: () => void;\n  toggleLoop: () => void;\n  playNext: () => void;\n  playPrevious: () => void;\n  hasNext: boolean;\n  hasPrevious: boolean;\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData)\n\ntype PlayerContextProviderProps = {\n  children: ReactNode; // qualquer coisa html, conteudo jsx\n}\n\nexport function PlayerContextProvider({ children }: PlayerContextProviderProps) {\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLooping, setIsLooping] = useState(false);\n\n  function playList(list: Episode[], index: number) {\n    setEpisodeList(list); // passa uma lista de episodios\n    setCurrentEpisodeIndex(index); // qual episodio tocou\n    setIsPlaying(true); // se a pessoa tiver pausado e despausar tem que tocar direto\n\n  }\n\n  function play(episode: Episode) { // jogar dentro do episodeList\n    setEpisodeList([episode]); // só um dentro do array\n    setCurrentEpisodeIndex(0); // então esse precisa ser o tocado no momento, forçando ser o unico do array, ou seja, 0\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying); // se tiver pause, vira play e vice versa\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping); // rodar infinito\n  }\n\n  function setPlayingState(state: boolean) {\n    setIsPlaying(state)\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = (currentEpisodeIndex + 1) < episodeList.length;\n\n  function playNext() {\n    const nextEpisodeIndex = currentEpisodeIndex + 1;\n\n    if (hasNext) { // barrar que ele toque um numero maior do que o que tem na lista\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n\n  return (\n    <PlayerContext.Provider\n      value={{ // Compartilhamento de dados, informações estilo redux, \n        episodeList, // o que estiver aqui será compartilhado\n        currentEpisodeIndex,\n        play,\n        playList,\n        playNext,\n        playPrevious,\n        isPlaying,\n        togglePlay,\n        setPlayingState,\n        hasNext,\n        hasPrevious,\n      }} >\n\n      {children} {/* recebendo o que está sendo passado no _app. */}\n    </PlayerContext.Provider>\n  )\n}\n\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n}"]},"metadata":{},"sourceType":"module"}