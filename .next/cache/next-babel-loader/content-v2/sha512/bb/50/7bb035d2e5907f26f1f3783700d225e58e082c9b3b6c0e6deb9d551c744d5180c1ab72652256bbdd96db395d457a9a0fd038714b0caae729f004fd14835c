{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/trabelo/Documents/podcastnny/src/contexts/PlayerContext.tsx\";\nimport { createContext, useState } from 'react'; // Compartilhamento de informações\n\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n\n  function playList(list, index) {\n    setEpisodeList(list); // passa uma lista de episodios\n\n    setCurrentEpisodeIndex(index); // qual episodio tocou\n\n    setIsPlaying(true); // se a pessoa tiver pausado e despausar tem que tocar direto\n  }\n\n  function play(episode) {\n    // jogar dentro do episodeList\n    setEpisodeList([episode]); // só um dentro do array\n\n    setCurrentEpisodeIndex(0); // então esse precisa ser o tocado no momento, forçando ser o unico do array, ou seja, 0\n\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying); // se tiver pause, vira play e vice versa\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  function playNext() {\n    const nextEpisodeIndex = currentEpisodeIndex + 1;\n\n    if (nextEpisodeIndex < episodeList.length) {\n      // barrar que ele toque um numero maior do que o que tem na lista\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (currentEpisodeIndex > 0) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      // Compartilhamento de dados, informações estilo redux, \n      episodeList,\n      // o que estiver aqui será compartilhado\n      currentEpisodeIndex,\n      play,\n      playList,\n      playNext,\n      playPrevious,\n      isPlaying,\n      togglePlay,\n      setPlayingState\n    },\n    children: [children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/trabelo/Documents/podcastnny/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","playList","list","index","play","episode","togglePlay","setPlayingState","state","playNext","nextEpisodeIndex","length","playPrevious"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD,C,CAEA;;AAqBA,OAAO,MAAMC,aAAa,gBAAGF,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,SAASG,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAAyE;AAC9E,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACM,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDP,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACQ,SAAD;AAAA,OAAYC;AAAZ,MAA4BT,QAAQ,CAAC,KAAD,CAA1C;;AAEA,WAASU,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAkD;AAChDP,IAAAA,cAAc,CAACM,IAAD,CAAd,CADgD,CAC1B;;AACtBJ,IAAAA,sBAAsB,CAACK,KAAD,CAAtB,CAFgD,CAEjB;;AAC/BH,IAAAA,YAAY,CAAC,IAAD,CAAZ,CAHgD,CAG5B;AAErB;;AAED,WAASI,IAAT,CAAcC,OAAd,EAAgC;AAAE;AAChCT,IAAAA,cAAc,CAAC,CAACS,OAAD,CAAD,CAAd,CAD8B,CACH;;AAC3BP,IAAAA,sBAAsB,CAAC,CAAD,CAAtB,CAF8B,CAEH;;AAC3BE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASM,UAAT,GAAsB;AACpBN,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ,CADoB,CACM;AAC3B;;AAED,WAASQ,eAAT,CAAyBC,KAAzB,EAAyC;AACvCR,IAAAA,YAAY,CAACQ,KAAD,CAAZ;AACD;;AAED,WAASC,QAAT,GAAoB;AAClB,UAAMC,gBAAgB,GAAGb,mBAAmB,GAAG,CAA/C;;AAEA,QAAIa,gBAAgB,GAAGf,WAAW,CAACgB,MAAnC,EAA2C;AAAE;AAC3Cb,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AACF;;AAED,WAASe,YAAT,GAAwB;AACtB,QAAIf,mBAAmB,GAAG,CAA1B,EAA6B;AAC3BC,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AACF;;AAGD,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AAAE;AACPF,MAAAA,WADK;AACQ;AACbE,MAAAA,mBAFK;AAGLO,MAAAA,IAHK;AAILH,MAAAA,QAJK;AAKLQ,MAAAA,QALK;AAMLG,MAAAA,YANK;AAOLb,MAAAA,SAPK;AAQLO,MAAAA,UARK;AASLC,MAAAA;AATK,KADT;AAAA,eAaGb,QAbH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD","sourcesContent":["import { createContext, ReactNode, useState } from 'react';\n\n// Compartilhamento de informações\ntype Episode = {\n  title: string,\n  members: string,\n  thumbnail: string,\n  duration: number,\n  url: string;\n}\n\ntype PlayerContextData = {\n  episodeList: Array<Episode>,\n  currentEpisodeIndex: number,\n  isPlaying: boolean;\n  play: (episode: Episode) => void\n  playList: (list: Episode[], index: number) => void;\n  setPlayingState: (state: boolean) => void\n  togglePlay: () => void\n  playNext: () => void\n  playPrevious: () => void\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData)\n\ntype PlayerContextProviderProps = {\n  children: ReactNode; // qualquer coisa html, conteudo jsx\n}\n\nexport function PlayerContextProvider({ children }: PlayerContextProviderProps) {\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0)\n  const [isPlaying, setIsPlaying] = useState(false)\n\n  function playList(list: Episode[], index: number) {\n    setEpisodeList(list); // passa uma lista de episodios\n    setCurrentEpisodeIndex(index); // qual episodio tocou\n    setIsPlaying(true); // se a pessoa tiver pausado e despausar tem que tocar direto\n\n  }\n\n  function play(episode: Episode) { // jogar dentro do episodeList\n    setEpisodeList([episode]); // só um dentro do array\n    setCurrentEpisodeIndex(0); // então esse precisa ser o tocado no momento, forçando ser o unico do array, ou seja, 0\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying); // se tiver pause, vira play e vice versa\n  }\n\n  function setPlayingState(state: boolean) {\n    setIsPlaying(state)\n  }\n\n  function playNext() {\n    const nextEpisodeIndex = currentEpisodeIndex + 1;\n\n    if (nextEpisodeIndex < episodeList.length) { // barrar que ele toque um numero maior do que o que tem na lista\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (currentEpisodeIndex > 0) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n\n  return (\n    <PlayerContext.Provider\n      value={{ // Compartilhamento de dados, informações estilo redux, \n        episodeList, // o que estiver aqui será compartilhado\n        currentEpisodeIndex,\n        play,\n        playList,\n        playNext,\n        playPrevious,\n        isPlaying,\n        togglePlay,\n        setPlayingState\n      }} >\n\n      {children} {/* recebendo o que está sendo passado no _app. */}\n    </PlayerContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}