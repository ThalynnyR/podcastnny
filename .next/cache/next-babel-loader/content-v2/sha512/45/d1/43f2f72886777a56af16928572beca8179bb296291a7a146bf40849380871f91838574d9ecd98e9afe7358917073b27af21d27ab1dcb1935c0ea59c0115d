{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/trabelo/Documents/podcastnny/src/contexts/PlayerContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react'; // Compartilhamento de informações\n\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  function play(episode) {\n    // jogar dentro do episodeList\n    setEpisodeList([episode]); // só um dentro do array\n\n    setCurrentEpisodeIndex(0); // então esse precisa ser o tocado no momento, forçando ser o unico do array, ou seja, 0\n\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying); // se tiver pause, vira play e vice versa\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      isPlaying: isPlaying,\n      togglePlay: togglePlay,\n      setPlayingState: setPlayingState\n    },\n    children: [children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlayerContextProvider, \"LrQXJ4YCuKXOoMsmvRtpeyylJ9U=\");\n\n_c = PlayerContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["/home/trabelo/Documents/podcastnny/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","play","episode","togglePlay","setPlayingState","state"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD,C,CAEA;;AAkBA,OAAO,IAAMC,aAAa,gBAAGF,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,SAASG,qBAAT,OAA6C;AAAA;;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAAA,kBACZH,QAAQ,CAAC,EAAD,CADI;AAAA,MAC3CI,WAD2C;AAAA,MAC9BC,cAD8B;;AAAA,mBAEIL,QAAQ,CAAC,CAAD,CAFZ;AAAA,MAE3CM,mBAF2C;AAAA,MAEtBC,sBAFsB;;AAAA,mBAGhBP,QAAQ,CAAC,KAAD,CAHQ;AAAA,MAG3CQ,SAH2C;AAAA,MAGhCC,YAHgC;;AAKlD,WAASC,IAAT,CAAcC,OAAd,EAAgC;AAAE;AAChCN,IAAAA,cAAc,CAAC,CAACM,OAAD,CAAD,CAAd,CAD8B,CACH;;AAC3BJ,IAAAA,sBAAsB,CAAC,CAAD,CAAtB,CAF8B,CAEH;;AAC3BE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASG,UAAT,GAAsB;AACpBH,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ,CADoB,CACM;AAC3B;;AAED,WAASK,eAAT,CAAyBC,KAAzB,EAAyC;AACvCL,IAAAA,YAAY,CAACK,KAAD,CAAZ;AACD;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEV,MAAAA,WAAW,EAAXA,WAAF;AAAeE,MAAAA,mBAAmB,EAAnBA,mBAAf;AAAoCI,MAAAA,IAAI,EAAJA,IAApC;AAA0CF,MAAAA,SAAS,EAATA,SAA1C;AAAqDI,MAAAA,UAAU,EAAVA,UAArD;AAAiEC,MAAAA,eAAe,EAAfA;AAAjE,KAA/B;AAAA,eACGV,QADH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAxBeD,qB;;KAAAA,qB","sourcesContent":["import { createContext, ReactNode, useState } from 'react';\n\n// Compartilhamento de informações\ntype Episode = {\n  title: string,\n  members: string,\n  thumbnail: string,\n  duration: number,\n  url: string;\n}\n\ntype PlayerContextData = {\n  episodeList: Array<Episode>,\n  currentEpisodeIndex: number,\n  isPlaying: boolean;\n  play: (episode: Episode) => void\n  setPlayingState: (state: boolean) => void\n  togglePlay: () => void\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData)\n\ntype PlayerContextProviderProps = {\n  children: ReactNode;\n}\n\nexport function PlayerContextProvider({ children }) {\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0)\n  const [isPlaying, setIsPlaying] = useState(false)\n\n  function play(episode: Episode) { // jogar dentro do episodeList\n    setEpisodeList([episode]); // só um dentro do array\n    setCurrentEpisodeIndex(0); // então esse precisa ser o tocado no momento, forçando ser o unico do array, ou seja, 0\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying); // se tiver pause, vira play e vice versa\n  }\n\n  function setPlayingState(state: boolean) {\n    setIsPlaying(state)\n  }\n\n  return (\n    <PlayerContext.Provider value={{ episodeList, currentEpisodeIndex, play, isPlaying, togglePlay, setPlayingState }}>\n      {children} {/* recebendo o que está sendo passado no _app. */}\n    </PlayerContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}