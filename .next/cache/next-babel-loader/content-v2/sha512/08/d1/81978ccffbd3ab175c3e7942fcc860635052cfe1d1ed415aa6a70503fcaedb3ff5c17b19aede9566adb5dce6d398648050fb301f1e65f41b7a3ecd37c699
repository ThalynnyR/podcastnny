{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useContext } from \"react\";\n//tipagem do proprio next\nimport Image from 'next/image';\nimport { api } from '../services/api';\nimport { format, parseISO } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport Link from 'next/link';\nimport { convertDurationToTimeString } from '../utils/convertDuration';\nimport styles from './home.module.scss';\nimport { PlayerContext } from \"../contexts/PlayerContext\";\nexport default function Home({\n  lastedEpisodes,\n  allEpisodes\n}) {\n  const {\n    play\n  } = useContext(PlayerContext); // useEffect(() => { //modelo SPA, só no acesso do usuário\n  //   fetch('http://localhost:3333/episodes')\n  //     .then((response) => response.json())\n  //     .then((data) => console.log(data));\n  // }, []) // 1º param: o que quero executar, 2º param: quando\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.homepage,\n    children: [/*#__PURE__*/_jsxs(\"section\", {\n      className: styles.latestEpisodes,\n      children: [/*#__PURE__*/_jsx(\"h2\", {\n        children: \"\\xDAltimos lan\\xE7amentos\"\n      }), /*#__PURE__*/_jsx(\"ul\", {\n        children: lastedEpisodes.map(episode => {\n          return /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsx(Image, {\n              width: 192,\n              height: 192,\n              src: episode.thumbnail,\n              alt: episode.title,\n              objectFit: \"cover\"\n            }), \" \", /*#__PURE__*/_jsxs(\"div\", {\n              className: styles.episodeDetails,\n              children: [/*#__PURE__*/_jsx(\"a\", {\n                href: \"\",\n                children: episode.title\n              }), /*#__PURE__*/_jsx(\"p\", {\n                children: episode.members\n              }), /*#__PURE__*/_jsx(\"span\", {\n                children: episode.publishedAt\n              }), /*#__PURE__*/_jsx(\"span\", {\n                children: episode.durationToString\n              })]\n            }), /*#__PURE__*/_jsx(\"button\", {\n              type: \"button\",\n              onClick: () => play(episode),\n              children: /*#__PURE__*/_jsx(\"img\", {\n                src: \"/play-green.svg\",\n                alt: \"Tocar episodio\"\n              })\n            })]\n          }, episode.id);\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(\"section\", {\n      className: styles.allEpisodes,\n      children: [/*#__PURE__*/_jsx(\"h2\", {\n        children: \"Todos os epis\\xF3dios\"\n      }), /*#__PURE__*/_jsxs(\"table\", {\n        cellSpacing: 0,\n        children: [/*#__PURE__*/_jsx(\"thead\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [/*#__PURE__*/_jsx(\"th\", {}), /*#__PURE__*/_jsx(\"th\", {\n              children: \"Podcast\"\n            }), /*#__PURE__*/_jsx(\"th\", {\n              children: \"Integrantes\"\n            }), /*#__PURE__*/_jsx(\"th\", {\n              children: \"Data\"\n            }), /*#__PURE__*/_jsx(\"th\", {\n              children: \"Dura\\xE7\\xE3o\"\n            }), /*#__PURE__*/_jsx(\"th\", {})]\n          })\n        }), /*#__PURE__*/_jsx(\"tbody\", {\n          children: allEpisodes.map(episode => {\n            return /*#__PURE__*/_jsxs(\"tr\", {\n              children: [/*#__PURE__*/_jsx(\"td\", {\n                style: {\n                  width: 72\n                },\n                children: /*#__PURE__*/_jsx(Image, {\n                  width: 120,\n                  height: 120,\n                  src: episode.thumbnail,\n                  alt: episode.title,\n                  objectFit: \"cover\"\n                })\n              }), /*#__PURE__*/_jsx(\"td\", {\n                children: /*#__PURE__*/_jsx(Link, {\n                  href: `/episodes/${episode.id}`,\n                  children: /*#__PURE__*/_jsx(\"a\", {\n                    children: episode.title\n                  })\n                })\n              }), /*#__PURE__*/_jsx(\"td\", {\n                children: episode.members\n              }), /*#__PURE__*/_jsx(\"td\", {\n                style: {\n                  width: 100\n                },\n                children: episode.publishedAt\n              }), /*#__PURE__*/_jsx(\"td\", {\n                children: episode.durationToString\n              }), /*#__PURE__*/_jsx(\"td\", {\n                children: /*#__PURE__*/_jsxs(\"button\", {\n                  type: \"button\",\n                  onClick: () => play(episode),\n                  children: [\" \", /*#__PURE__*/_jsx(\"img\", {\n                    src: \"/play-green.svg\",\n                    alt: \"Tocar epis\\xF3dio\"\n                  })]\n                })\n              })]\n            }, episode.id);\n          })\n        })]\n      })]\n    })]\n  });\n} //modelo SSR, sempre carrega na home \n// export async function getServerSideProps() { //passa tudo por props, pela propriedade\n\nexport const getStaticProps = async () => {\n  // modelo SSG, carrega só de uma vez e mantem, sem precisar carregar todas as vezes\n  const {\n    data\n  } = await api.get('episodes', {\n    params: {\n      //limite de quant retorando = 12, ordenar pela da de publicacao, em ordem decrescente  \n      _limit: 12,\n      _sort: 'published_at',\n      _order: 'desc'\n    }\n  });\n  const episodes = data.map(episode => {\n    return {\n      id: episode.id,\n      title: episode.title,\n      members: episode.members,\n      publishedAt: format(parseISO(episode.published_at), 'd MMM yy', {\n        locale: ptBR\n      }),\n      thumbnail: episode.thumbnail,\n      duration: Number(episode.file.duration),\n      durationToString: convertDurationToTimeString(Number(episode.file.duration)),\n      description: episode.description,\n      url: episode.file.url\n    };\n  }); //retornar os lancamentos e os restantes separados\n\n  const lastedEpisodes = episodes.slice(0, 2);\n  const allEpisodes = episodes.slice(2, episodes.length);\n  return {\n    props: {\n      // episodes: data, // dados puros \n      lastedEpisodes,\n      allEpisodes //dados formatados episodes: episodes\n\n    },\n    revalidate: 60 * 60 * 8 // a cada 8 horas a pessoa gera uma nova versão da pagina\n\n  };\n};","map":null,"metadata":{},"sourceType":"module"}