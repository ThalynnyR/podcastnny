{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { format, parseISO } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport { api } from '../../services/api';\nimport { convertDurationToTimeString } from '../../utils/convertDuration';\nimport styles from './episode.module.scss';\nexport default function Episode({\n  episode\n}) {\n  const router = useRouter();\n\n  if (router.isFallback) {\n    // se ele estiver em processo de carregamento\n\n    /*#__PURE__*/\n    _jsx(\"p\", {\n      children: \"Pera\\xED rapidinho...\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.episode,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.thumbnailContainer,\n      children: [/*#__PURE__*/_jsx(Link, {\n        href: \"/\",\n        children: /*#__PURE__*/_jsx(\"button\", {\n          type: \"button\",\n          children: /*#__PURE__*/_jsx(\"img\", {\n            src: \"/arrow-left.svg\",\n            alt: \"Voltar\"\n          })\n        })\n      }), /*#__PURE__*/_jsx(Image, {\n        width: 700,\n        height: 160,\n        src: episode.thumbnail,\n        objectFit: \"cover\"\n      }), /*#__PURE__*/_jsx(\"button\", {\n        type: \"button\",\n        children: /*#__PURE__*/_jsx(\"img\", {\n          src: \"/play.svg\",\n          alt: \"Tocar epis\\xF3dio\"\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(\"header\", {\n      children: [/*#__PURE__*/_jsx(\"h1\", {\n        children: episode.title\n      }), /*#__PURE__*/_jsx(\"span\", {\n        children: episode.members\n      }), /*#__PURE__*/_jsx(\"span\", {\n        children: episode.publishedAt\n      }), /*#__PURE__*/_jsx(\"span\", {\n        children: episode.durationAsString\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.description,\n      dangerouslySetInnerHTML: {\n        __html: episode.description\n      }\n    })]\n  });\n} // Quando a pagina é dinamica, ou seja, varios episodios usararão essse componente\n\nexport const getStaticPaths = async () => {\n  // buscar categorias mais acessadas\n  const {\n    data\n  } = await api.get('episodes', {\n    params: {\n      //limite de quant retorando = 12, ordenar pela da de publicacao, em ordem decrescente  \n      _limit: 2,\n      // gerar as duas, de primeira\n      _sort: 'published_at',\n      _order: 'desc'\n    }\n  });\n  const paths = data.map(path => {\n    return {\n      params: {\n        slug: path.id\n      }\n    };\n  });\n  return {\n    paths,\n    // paths: paths a const lá de cima\n    fallback: 'blocking' // false - se o episodio não for gerado no build, ele gera um 404\n    // true - se não foi gerado, ele vai tentar buscar | executa do lado do browser, cliente\n    // 'blocking' - buscar os dados na camada do next, melhor pra SEO\n\n  };\n};\nexport const getStaticProps = async ctx => {\n  const {\n    slug\n  } = ctx.params; // passando o nome do episodio por paramentro\n\n  const {\n    data\n  } = await api.get(`episodes/${slug}`);\n  const episode = {\n    id: data.id,\n    title: data.title,\n    thumbnail: data.thumbnail,\n    members: data.members,\n    publishedAt: format(parseISO(data.published_at), 'd MMM yy', {\n      locale: ptBR\n    }),\n    // 8 jan 21\n    duration: Number(data.file.duration),\n    durationAsString: convertDurationToTimeString(Number(data.file.duration)),\n    description: data.description,\n    utl: data.file.url\n  };\n  return {\n    props: {\n      episode\n    },\n    revalidate: 60 * 60 * 24 // 24 hours\n\n  };\n};","map":null,"metadata":{},"sourceType":"module"}